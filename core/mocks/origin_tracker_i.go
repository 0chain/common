// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"

	util "github.com/0chain/common/core/util"
	mock "github.com/stretchr/testify/mock"
)

// OriginTrackerI is an autogenerated mock type for the OriginTrackerI type
type OriginTrackerI struct {
	mock.Mock
}

// GetOrigin provides a mock function with given fields:
func (_m *OriginTrackerI) GetOrigin() util.Sequence {
	ret := _m.Called()

	var r0 util.Sequence
	if rf, ok := ret.Get(0).(func() util.Sequence); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(util.Sequence)
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *OriginTrackerI) GetVersion() util.Sequence {
	ret := _m.Called()

	var r0 util.Sequence
	if rf, ok := ret.Get(0).(func() util.Sequence); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(util.Sequence)
	}

	return r0
}

// Read provides a mock function with given fields: r
func (_m *OriginTrackerI) Read(r io.Reader) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOrigin provides a mock function with given fields: origin
func (_m *OriginTrackerI) SetOrigin(origin util.Sequence) {
	_m.Called(origin)
}

// SetVersion provides a mock function with given fields: version
func (_m *OriginTrackerI) SetVersion(version util.Sequence) {
	_m.Called(version)
}

// Write provides a mock function with given fields: w
func (_m *OriginTrackerI) Write(w io.Writer) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOriginTrackerI interface {
	mock.TestingT
	Cleanup(func())
}

// NewOriginTrackerI creates a new instance of OriginTrackerI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOriginTrackerI(t mockConstructorTestingTNewOriginTrackerI) *OriginTrackerI {
	mock := &OriginTrackerI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
