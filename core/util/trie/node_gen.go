package trie

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z nilNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *nilNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z nilNode) Msgsize() (s int) {
	s = 1
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *routingNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "k"
	o = append(o, 0x84, 0xa1, 0x6b)
	o = msgp.AppendBytes(o, z.key)
	// string "h"
	o = append(o, 0xa1, 0x68)
	o = msgp.AppendBytes(o, z.hash)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendArrayHeader(o, uint32(16))
	for za0001 := range z.Children {
		o, err = z.Children[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Children", za0001)
			return
		}
	}
	// string "w"
	o = append(o, 0xa1, 0x77)
	o = msgp.AppendUint64(o, z.weight)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *routingNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.key, bts, err = msgp.ReadBytesBytes(bts, z.key)
			if err != nil {
				err = msgp.WrapError(err, "key")
				return
			}
		case "h":
			z.hash, bts, err = msgp.ReadBytesBytes(bts, z.hash)
			if err != nil {
				err = msgp.WrapError(err, "hash")
				return
			}
		case "c":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if zb0002 != uint32(16) {
				err = msgp.ArrayError{Wanted: uint32(16), Got: zb0002}
				return
			}
			for za0001 := range z.Children {
				bts, err = z.Children[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Children", za0001)
					return
				}
			}
		case "w":
			z.weight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "weight")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *routingNode) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len(z.key) + 2 + msgp.BytesPrefixSize + len(z.hash) + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Children {
		s += z.Children[za0001].Msgsize()
	}
	s += 2 + msgp.Uint64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *valueNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "k"
	o = append(o, 0x84, 0xa1, 0x6b)
	o = msgp.AppendBytes(o, z.key)
	// string "h"
	o = append(o, 0xa1, 0x68)
	o = msgp.AppendBytes(o, z.hash)
	// string "v"
	o = append(o, 0xa1, 0x76)
	o = msgp.AppendBytes(o, z.value)
	// string "w"
	o = append(o, 0xa1, 0x77)
	o = msgp.AppendUint64(o, z.weight)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *valueNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.key, bts, err = msgp.ReadBytesBytes(bts, z.key)
			if err != nil {
				err = msgp.WrapError(err, "key")
				return
			}
		case "h":
			z.hash, bts, err = msgp.ReadBytesBytes(bts, z.hash)
			if err != nil {
				err = msgp.WrapError(err, "hash")
				return
			}
		case "v":
			z.value, bts, err = msgp.ReadBytesBytes(bts, z.value)
			if err != nil {
				err = msgp.WrapError(err, "value")
				return
			}
		case "w":
			z.weight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "weight")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *valueNode) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len(z.key) + 2 + msgp.BytesPrefixSize + len(z.hash) + 2 + msgp.BytesPrefixSize + len(z.value) + 2 + msgp.Uint64Size
	return
}
